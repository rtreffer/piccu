{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "$defs": {
    "cc_apk_configure": {
      "type": "object",
      "properties": {
        "apk_repos": {
          "type": "object",
          "properties": {
            "preserve_repositories": {
              "type": "boolean",
              "default": false,
              "description": "By default, cloud-init will generate a new repositories file ``/etc/apk/repositories`` based on any valid configuration settings specified within a apk_repos section of cloud config. To disable this behavior and preserve the repositories file from the pristine image, set ``preserve_repositories`` to ``true``.\n\n The ``preserve_repositories`` option overrides all other config keys that would alter ``/etc/apk/repositories``."
            },
            "alpine_repo": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "base_url": {
                  "type": "string",
                  "default": "https://alpine.global.ssl.fastly.net/alpine",
                  "description": "The base URL of an Alpine repository, or mirror, to download official packages from. If not specified then it defaults to ``https://alpine.global.ssl.fastly.net/alpine``"
                },
                "community_enabled": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to add the Community repo to the repositories file. By default the Community repo is not included."
                },
                "testing_enabled": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to add the Testing repo to the repositories file. By default the Testing repo is not included. It is only recommended to use the Testing repo on a machine running the ``Edge`` version of Alpine as packages installed from Testing may have dependancies that conflict with those in non-Edge Main or Community repos."
                },
                "version": {
                  "type": "string",
                  "description": "The Alpine version to use (e.g. ``v3.12`` or ``edge``)"
                }
              },
              "required": [
                "version"
              ],
              "minProperties": 1,
              "additionalProperties": false
            },
            "local_repo_base_url": {
              "type": "string",
              "description": "The base URL of an Alpine repository containing unofficial packages"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      }
    },
    "cc_apt_pipelining": {
      "type": "object",
      "properties": {
        "apt_pipelining": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "enum": [
                "none",
                "unchanged",
                "os"
              ]
            }
          ]
        }
      }
    }
  },
  "allOf": [
    {
      "$ref": "#/$defs/cc_apk_configure"
    },
    {
      "$ref": "#/$defs/cc_apt_pipelining"
    },
    {
      "type": "object",
      "properties": {
        "apt": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "preserve_sources_list": {
              "type": "boolean",
              "default": false,
              "description": "By default, cloud-init will generate a new sources\nlist in ``/etc/apt/sources.list.d`` based on any\nchanges specified in cloud config. To disable this\nbehavior and preserve the sources list from the\npristine image, set ``preserve_sources_list``\nto ``true``.\n\nThe ``preserve_sources_list`` option overrides\nall other config keys that would alter\n``sources.list`` or ``sources.list.d``,\n**except** for additional sources to be added\nto ``sources.list.d``."
            },
            "disable_suites": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "description": "Entries in the sources list can be disabled using\n``disable_suites``, which takes a list of suites\nto be disabled. If the string ``$RELEASE`` is\npresent in a suite in the ``disable_suites`` list,\nit will be replaced with the release name. If a\nsuite specified in ``disable_suites`` is not\npresent in ``sources.list`` it will be ignored.\nFor convenience, several aliases are provided for\n``disable_suites``:\n\n    - ``updates`` => ``$RELEASE-updates``\n    - ``backports`` => ``$RELEASE-backports``\n    - ``security`` => ``$RELEASE-security``\n    - ``proposed`` => ``$RELEASE-proposed``\n    - ``release`` => ``$RELEASE``.\n\nWhen a suite is disabled using ``disable_suites``,\nits entry in ``sources.list`` is not deleted; it\nis just commented out."
            },
            "primary": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "arches"
                ],
                "properties": {
                  "arches": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "uri": {
                    "type": "string",
                    "format": "uri"
                  },
                  "search": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    },
                    "minItems": 1
                  },
                  "search_dns": {
                    "type": "boolean"
                  },
                  "keyid": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyserver": {
                    "type": "string"
                  }
                }
              },
              "description": "The primary and security archive mirrors can\nbe specified using the ``primary`` and\n``security`` keys, respectively. Both the\n``primary`` and ``security`` keys take a list\nof configs, allowing mirrors to be specified\non a per-architecture basis. Each config is a\ndictionary which must have an entry for\n``arches``, specifying which architectures\nthat config entry is for. The keyword\n``default`` applies to any architecture not\nexplicitly listed. The mirror url can be specified\nwith the ``uri`` key, or a list of mirrors to\ncheck can be provided in order, with the first\nmirror that can be resolved being selected. This\nallows the same configuration to be used in\ndifferent environment, with different hosts used\nfor a local apt mirror. If no mirror is provided\nby ``uri`` or ``search``, ``search_dns`` may be\nused to search for dns names in the format\n``<distro>-mirror`` in each of the following:\n\n    - fqdn of this host per cloud metadata,\n    - localdomain,\n    - domains listed in ``/etc/resolv.conf``.\n\nIf there is a dns entry for ``<distro>-mirror``,\nthen it is assumed that there is a distro mirror\nat ``http://<distro>-mirror.<domain>/<distro>``.\nIf the ``primary`` key is defined, but not the\n``security`` key, then then configuration for\n``primary`` is also used for ``security``.\nIf ``search_dns`` is used for the ``security``\nkey, the search pattern will be\n``<distro>-security-mirror``.\n\nEach mirror may also specify a key to import via\nany of the following optional keys:\n\n    - ``keyid``: a key to import via shortid or                                   fingerprint.\n    - ``key``: a raw PGP key.\n    - ``keyserver``: alternate keyserver to pull                                     ``keyid`` key from.\n\nIf no mirrors are specified, or all lookups fail,\nthen default mirrors defined in the datasource\nare used. If none are present in the datasource\neither the following defaults are used:\n\n    - ``primary`` =>                             ``http://archive.ubuntu.com/ubuntu``.\n    - ``security`` =>                             ``http://security.ubuntu.com/ubuntu``\n"
            },
            "security": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "arches"
                ],
                "properties": {
                  "arches": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "uri": {
                    "type": "string",
                    "format": "uri"
                  },
                  "search": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    },
                    "minItems": 1
                  },
                  "search_dns": {
                    "type": "boolean"
                  },
                  "keyid": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "keyserver": {
                    "type": "string"
                  }
                }
              },
              "description": "Please refer to the primary config documentation"
            },
            "add_apt_repo_match": {
              "type": "string",
              "default": "^[\\w-]+:\\w",
              "description": "All source entries in ``apt-sources`` that match\nregex in ``add_apt_repo_match`` will be added to\nthe system using ``add-apt-repository``. If\n``add_apt_repo_match`` is not specified, it\ndefaults to ``^[\\w-]+:\\w``"
            },
            "debconf_selections": {
              "type": "object",
              "items": {
                "type": "string"
              },
              "description": "Debconf additional configurations can be specified as a\ndictionary under the ``debconf_selections`` config\nkey, with each key in the dict representing a\ndifferent set of configurations. The value of each key\nmust be a string containing all the debconf\nconfigurations that must be applied. We will bundle\nall of the values and pass them to\n``debconf-set-selections``. Therefore, each value line\nmust be a valid entry for ``debconf-set-selections``,\nmeaning that they must possess for distinct fields:\n\n``pkgname question type answer``\n\nWhere:\n\n    - ``pkgname`` is the name of the package.\n    - ``question`` the name of the questions.\n    - ``type`` is the type of question.\n    - ``answer`` is the value used to ansert the                             question.\n\nFor example:                         ``ippackage ippackage/ip string 127.0.01``\n"
            },
            "sources_list": {
              "type": "string",
              "description": "Specifies a custom template for rendering\n``sources.list`` . If no ``sources_list`` template\nis given, cloud-init will use sane default. Within\nthis template, the following strings will be\nreplaced with the appropriate values:\n\n     - ``$MIRROR``\n     - ``$RELEASE``\n     - ``$PRIMARY``\n     - ``$SECURITY``\n     - ``$KEY_FILE``"
            },
            "conf": {
              "type": "string",
              "description": "Specify configuration for apt, such as proxy\nconfiguration. This configuration is specified as a\nstring. For multiline apt configuration, make sure\nto follow yaml syntax."
            },
            "https_proxy": {
              "type": "string",
              "description": "More convenient way to specify https apt proxy.\nhttps proxy url is specified in the format\n``https://[[user][:pass]@]host[:port]/``."
            },
            "http_proxy": {
              "type": "string",
              "description": "More convenient way to specify http apt proxy.\nhttp proxy url is specified in the format\n``http://[[user][:pass]@]host[:port]/``."
            },
            "proxy": {
              "type": "string",
              "description": "Alias for defining a http apt proxy."
            },
            "ftp_proxy": {
              "type": "string",
              "description": "More convenient way to specify ftp apt proxy.\nftp proxy url is specified in the format\n``ftp://[[user][:pass]@]host[:port]/``."
            },
            "sources": {
              "type": "object",
              "items": {
                "type": "string"
              },
              "description": "Source list entries can be specified as a\ndictionary under the ``sources`` config key, with\neach key in the dict representing a different source\nfile. The key of each source entry will be used\nas an id that can be referenced in other config\nentries, as well as the filename for the source's\nconfiguration under ``/etc/apt/sources.list.d``.\nIf the name does not end with ``.list``, it will\nbe appended. If there is no configuration for a\nkey in ``sources``, no file will be written, but\nthe key may still be referred to as an id in other\n``sources`` entries.\n\nEach entry under ``sources`` is a dictionary which\nmay contain any of the following optional keys:\n\n    - ``source``: a sources.list entry                                   (some variable replacements apply).\n    - ``keyid``: a key to import via shortid or                                   fingerprint.\n    - ``key``: a raw PGP key.\n    - ``keyserver``: alternate keyserver to pull                                     ``keyid`` key from.\n    - ``filename``: specify the name of the .list file\n\nThe ``source`` key supports variable\nreplacements for the following strings:\n\n    - ``$MIRROR``\n    - ``$PRIMARY``\n    - ``$SECURITY``\n    - ``$RELEASE``\n    - ``$KEY_FILE``"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "bootcmd": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "additionalItems": false,
          "additionalProperties": false,
          "minItems": 1
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "chef": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "directories": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "description": "Create the necessary directories for chef to run. By\ndefault, it creates the following directories:\n\n   - ``/etc/chef``\n   - ``/var/log/chef``\n   - ``/var/lib/chef``\n   - ``/var/cache/chef``\n   - ``/var/backups/chef``\n   - ``/var/run/chef``"
            },
            "validation_cert": {
              "type": "string",
              "description": "Optional string to be written to file validation_key.\nSpecial value ``system`` means set use existing file.\n"
            },
            "validation_key": {
              "type": "string",
              "default": "/etc/chef/validation.pem",
              "description": "Optional path for validation_cert. default to\n``/etc/chef/validation.pem``."
            },
            "firstboot_path": {
              "type": "string",
              "default": "/etc/chef/firstboot.json",
              "description": "Path to write run_list and initial_attributes keys that\nshould also be present in this configuration, defaults\nto ``/etc/chef/firstboot.json``."
            },
            "exec": {
              "type": "boolean",
              "default": false,
              "description": "define if we should run or not run chef (defaults to\nfalse, unless a gem installed is requested where this\nwill then default to true)."
            },
            "client_key": {
              "type": "string",
              "default": "/etc/chef/client.pem",
              "description": "Optional path for client_cert. default to\n``/etc/chef/client.pem``."
            },
            "encrypted_data_bag_secret": {
              "type": "string",
              "default": null,
              "description": "Specifies the location of the secret key used by chef\nto encrypt data items. By default, this path is set\nto None, meaning that chef will have to look at the\npath ``/etc/chef/encrypted_data_bag_secret`` for it.\n"
            },
            "environment": {
              "type": "string",
              "default": "_default",
              "description": "Specifies which environment chef will use. By default,\nit will use the ``_default`` configuration.\n"
            },
            "file_backup_path": {
              "type": "string",
              "default": "/var/backups/chef",
              "description": "Specifies the location in which backup files are\nstored. By default, it uses the\n``/var/backups/chef`` location."
            },
            "file_cache_path": {
              "type": "string",
              "default": "/var/cache/chef",
              "description": "Specifies the location in which chef cache files will\nbe saved. By default, it uses the ``/var/cache/chef``\nlocation."
            },
            "json_attribs": {
              "type": "string",
              "default": "/etc/chef/firstboot.json",
              "description": "Specifies the location in which some chef json data is\nstored. By default, it uses the\n``/etc/chef/firstboot.json`` location."
            },
            "log_level": {
              "type": "string",
              "default": ":info",
              "description": "Defines the level of logging to be stored in the log\nfile. By default this value is set to ``:info``.\n"
            },
            "log_location": {
              "type": "string",
              "default": "/var/log/chef/client.log",
              "description": "Specifies the location of the chef lof file. By\ndefault, the location is specified at\n``/var/log/chef/client.log``."
            },
            "node_name": {
              "type": "string",
              "description": "The name of the node to run. By default, we will\nuse th instance id as the node name."
            },
            "omnibus_url": {
              "type": "string",
              "default": "https://www.chef.io/chef/install.sh",
              "description": "Omnibus URL if chef should be installed through\nOmnibus. By default, it uses the\n``https://www.chef.io/chef/install.sh``."
            },
            "omnibus_url_retries": {
              "type": "integer",
              "default": 5,
              "description": "The number of retries that will be attempted to reach\nthe Omnibus URL"
            },
            "omnibus_version": {
              "type": "string",
              "description": "Optional version string to require for omnibus\ninstall."
            },
            "pid_file": {
              "type": "string",
              "default": "/var/run/chef/client.pid",
              "description": "The location in which a process identification\nnumber (pid) is saved. By default, it saves\nin the ``/var/run/chef/client.pid`` location."
            },
            "server_url": {
              "type": "string",
              "description": "The URL for the chef server"
            },
            "show_time": {
              "type": "boolean",
              "default": true,
              "description": "Show time in chef logs"
            },
            "ssl_verify_mode": {
              "type": "string",
              "default": ":verify_none",
              "description": "Set the verify mode for HTTPS requests. We can have\ntwo possible values for this parameter:\n\n    - ``:verify_none``: No validation of SSL                             certificates.\n    - ``:verify_peer``: Validate all SSL certificates.\n\nBy default, the parameter is set as ``:verify_none``.\n"
            },
            "validation_name": {
              "type": "string",
              "description": "The name of the chef-validator key that Chef Infra\nClient uses to access the Chef Infra Server during\nthe initial Chef Infra Client run."
            },
            "force_install": {
              "type": "boolean",
              "default": false,
              "description": "If set to ``True``, forces chef installation, even\nif it is already installed."
            },
            "initial_attributes": {
              "type": "object",
              "items": {
                "type": "string"
              },
              "description": "Specify a list of initial attributes used by the\ncookbooks."
            },
            "install_type": {
              "type": "string",
              "default": "packages",
              "description": "The type of installation for chef. It can be one of\nthe following values:\n\n    - ``packages``\n    - ``gems``\n    - ``omnibus``"
            },
            "run_list": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A run list for a first boot json."
            },
            "chef_license": {
              "type": "string",
              "description": "string that indicates if user accepts or not license\nrelated to some of chef products"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "updates": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "network": {
              "type": "object",
              "required": [
                "when"
              ],
              "additionalProperties": false,
              "properties": {
                "when": {
                  "type": "array",
                  "additionalProperties": false,
                  "items": {
                    "type": "string",
                    "additionalProperties": false,
                    "enum": [
                      "boot-new-instance",
                      "boot-legacy",
                      "boot",
                      "hotplug"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "keyboard": {
          "type": "object",
          "properties": {
            "layout": {
              "type": "string",
              "description": "Required. Keyboard layout. Corresponds to XKBLAYOUT.\n"
            },
            "model": {
              "type": "string",
              "default": "pc105",
              "description": "Optional. Keyboard model. Corresponds to XKBMODEL.\n"
            },
            "variant": {
              "type": "string",
              "description": "Optional. Keyboard variant. Corresponds to XKBVARIANT.\n"
            },
            "options": {
              "type": "string",
              "description": "Optional. Keyboard options. Corresponds to XKBOPTIONS.\n"
            }
          },
          "required": [
            "layout"
          ],
          "additionalProperties": false
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "locale": {
          "type": "string",
          "description": "The locale to set as the system's locale (e.g. ar_PS)"
        },
        "locale_configfile": {
          "type": "string",
          "description": "The file in which to write the locale configuration (defaults to the distro's default location)"
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "ntp": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "pools": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "hostname"
              },
              "uniqueItems": true,
              "description": "List of ntp pools. If both pools and servers are\nempty, 4 default pool servers will be provided of\nthe format ``{0-3}.{distro}.pool.ntp.org``. NOTE:\nfor Alpine Linux when using the Busybox NTP client\nthis setting will be ignored due to the limited\nfunctionality of Busybox's ntpd."
            },
            "servers": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "hostname"
              },
              "uniqueItems": true,
              "description": "List of ntp servers. If both pools and servers are\nempty, 4 default pool servers will be provided with\nthe format ``{0-3}.{distro}.pool.ntp.org``."
            },
            "ntp_client": {
              "type": "string",
              "default": "auto",
              "description": "Name of an NTP client to use to configure system NTP.\nWhen unprovided or 'auto' the default client preferred\nby the distribution will be used. The following\nbuilt-in client names can be used to override existing\nconfiguration defaults: chrony, ntp, ntpdate,\nsystemd-timesyncd."
            },
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Attempt to enable ntp clients if set to True.  If set\nto False, ntp client will not be configured or\ninstalled"
            },
            "config": {
              "description": "Configuration settings or overrides for the\n``ntp_client`` specified.",
              "type": [
                "object"
              ],
              "properties": {
                "confpath": {
                  "type": "string",
                  "description": "The path to where the ``ntp_client``\nconfiguration is written."
                },
                "check_exe": {
                  "type": "string",
                  "description": "The executable name for the ``ntp_client``.\nFor example, ntp service ``check_exe`` is\n'ntpd' because it runs the ntpd binary."
                },
                "packages": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "uniqueItems": true,
                  "description": "List of packages needed to be installed for the\nselected ``ntp_client``."
                },
                "service_name": {
                  "type": "string",
                  "description": "The systemd or sysvinit service name used to\nstart and stop the ``ntp_client``\nservice."
                },
                "template": {
                  "type": "string",
                  "description": "Inline template allowing users to define their\nown ``ntp_client`` configuration template.\nThe value must start with '## template:jinja'\nto enable use of templating support.\n"
                }
              },
              "minProperties": 1,
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "resize_rootfs": {
          "enum": [
            true,
            false,
            "noblock"
          ],
          "description": "Whether to resize the root partition. Default: 'true'"
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "runcmd": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "additionalItems": false,
          "additionalProperties": false,
          "minItems": 1
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "snap": {
          "type": "object",
          "properties": {
            "assertions": {
              "type": [
                "object",
                "array"
              ],
              "items": {
                "type": "string"
              },
              "additionalItems": false,
              "minItems": 1,
              "minProperties": 1,
              "uniqueItems": true,
              "additionalProperties": {
                "type": "string"
              }
            },
            "commands": {
              "type": [
                "object",
                "array"
              ],
              "items": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "additionalItems": false,
              "minItems": 1,
              "minProperties": 1,
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "squashfuse_in_container": {
              "type": "boolean"
            }
          },
          "additionalProperties": false,
          "minProperties": 1
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "ubuntu_advantage": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "token": {
              "type": "string",
              "description": "A contract token obtained from https://ubuntu.com/advantage."
            }
          },
          "required": [
            "token"
          ],
          "additionalProperties": false
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "drivers": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "nvidia": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "license-accepted"
              ],
              "properties": {
                "license-accepted": {
                  "type": "boolean",
                  "description": "Do you accept the NVIDIA driver license?"
                },
                "version": {
                  "type": "string",
                  "description": "The version of the driver to install (e.g. \"390\", \"410\"). Defaults to the latest version."
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "write_files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path of the file to which ``content`` is decoded\nand written\n"
              },
              "content": {
                "type": "string",
                "default": "",
                "description": "Optional content to write to the provided ``path``.\nWhen content is present and encoding is not 'text/plain',\ndecode the content prior to writing. Default:\n**''**\n"
              },
              "owner": {
                "type": "string",
                "default": "root:root",
                "description": "Optional owner:group to chown on the file. Default:\n**root:root**\n"
              },
              "permissions": {
                "type": "string",
                "default": "0644",
                "description": "Optional file permissions to set on ``path``\nrepresented as an octal string '0###'. Default:\n**'0644'**\n"
              },
              "encoding": {
                "type": "string",
                "default": "text/plain",
                "enum": [
                  "gz",
                  "gzip",
                  "gz+base64",
                  "gzip+base64",
                  "gz+b64",
                  "gzip+b64",
                  "b64",
                  "base64"
                ],
                "description": "Optional encoding type of the content. Default is\n**text/plain** and no content decoding is\nperformed. Supported encoding types are:\ngz, gzip, gz+base64, gzip+base64, gz+b64, gzip+b64, b64, base64."
              },
              "append": {
                "type": "boolean",
                "default": false,
                "description": "Whether to append ``content`` to existing file if\n``path`` exists. Default: **false**.\n"
              },
              "defer": {
                "type": "boolean",
                "default": false,
                "description": "Defer writing the file until 'final' stage, after\nusers were created, and packages were installed.\nDefault: **False**.\n"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "write_files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path of the file to which ``content`` is decoded\nand written\n"
              },
              "content": {
                "type": "string",
                "default": "",
                "description": "Optional content to write to the provided ``path``.\nWhen content is present and encoding is not 'text/plain',\ndecode the content prior to writing. Default:\n**''**\n"
              },
              "owner": {
                "type": "string",
                "default": "root:root",
                "description": "Optional owner:group to chown on the file. Default:\n**root:root**\n"
              },
              "permissions": {
                "type": "string",
                "default": "0644",
                "description": "Optional file permissions to set on ``path``\nrepresented as an octal string '0###'. Default:\n**'0644'**\n"
              },
              "encoding": {
                "type": "string",
                "default": "text/plain",
                "enum": [
                  "gz",
                  "gzip",
                  "gz+base64",
                  "gzip+base64",
                  "gz+b64",
                  "gzip+b64",
                  "b64",
                  "base64"
                ],
                "description": "Optional encoding type of the content. Default is\n**text/plain** and no content decoding is\nperformed. Supported encoding types are:\ngz, gzip, gz+base64, gzip+base64, gz+b64, gzip+b64, b64, base64."
              },
              "append": {
                "type": "boolean",
                "default": false,
                "description": "Whether to append ``content`` to existing file if\n``path`` exists. Default: **false**.\n"
              },
              "defer": {
                "type": "boolean",
                "default": false,
                "description": "Defer writing the file until 'final' stage, after\nusers were created, and packages were installed.\nDefault: **False**.\n"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    {
      "type": "object",
      "properties": {
        "zypper": {
          "type": "object",
          "properties": {
            "repos": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique id of the repo, used when\n writing\n/etc/zypp/repos.d/<id>.repo."
                  },
                  "baseurl": {
                    "type": "string",
                    "format": "uri",
                    "description": "The base repositoy URL"
                  }
                },
                "required": [
                  "id",
                  "baseurl"
                ],
                "additionalProperties": true
              },
              "minItems": 1
            },
            "config": {
              "type": "object",
              "description": "Any supported zypo.conf key is written to\n/etc/zypp/zypp.conf'"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      }
    }
  ]
}
